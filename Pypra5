# Python Questions

# Question 1: Calculate the GCD of two numbers using recursion
def gcd(a, b):
    return a if b == 0 else gcd(b, a % b)

print(gcd(48, 18))

# Question 2: Find all permutations of a string
def string_permutations(s):
    from itertools import permutations
    return [''.join(p) for p in permutations(s)]

print(string_permutations("abc"))

# Question 3: Check if all elements in a list are unique
def all_unique(lst):
    return len(lst) == len(set(lst))

print(all_unique([1, 2, 3, 4]))
print(all_unique([1, 2, 2, 4]))

# Question 4: Generate Pascal's Triangle up to n rows
def pascals_triangle(n):
    triangle = [[1]]
    for _ in range(n - 1):
        row = [1] + [triangle[-1][i] + triangle[-1][i + 1] for i in range(len(triangle[-1]) - 1)] + [1]
        triangle.append(row)
    return triangle

print(pascals_triangle(5))

# Question 5: Merge two sorted lists into one sorted list
def merge_sorted_lists(lst1, lst2):
    from heapq import merge
    return list(merge(lst1, lst2))

print(merge_sorted_lists([1, 3, 5], [2, 4, 6]))

# Question 6: Find the intersection of two lists
def list_intersection(lst1, lst2):
    return list(set(lst1) & set(lst2))

print(list_intersection([1, 2, 3], [2, 3, 4]))

# Question 7: Check if a given string is a valid IPv4 address
def is_valid_ipv4(ip):
    parts = ip.split('.')
    return len(parts) == 4 and all(part.isdigit() and 0 <= int(part) <= 255 for part in parts)

print(is_valid_ipv4("192.168.1.1"))
print(is_valid_ipv4("999.999.999.999"))

# Question 8: Calculate the factorial of a number without recursion
def factorial(n):
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result

print(factorial(5))

# Question 9: Check if a number is a Fibonacci number
def is_fibonacci(num):
    x1, x2 = 5 * num**2 + 4, 5 * num**2 - 4
    return int(x1**0.5)**2 == x1 or int(x2**0.5)**2 == x2

print(is_fibonacci(8))
print(is_fibonacci(10))

# Question 10: Find the longest substring without repeating characters
def longest_unique_substring(s):
    seen, start, max_length = {}, 0, 0
    for i, char in enumerate(s):
        if char in seen and seen[char] >= start:
            start = seen[char] + 1
        seen[char] = i
        max_length = max(max_length, i - start + 1)
    return max_length

print(longest_unique_substring("abcabcbb"))
